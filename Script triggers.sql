 -------------------------------------------------/*Triggers*/---------------------------------------------------------
 /*?	RN-1: No es posible tener una sexta sanción.
Como monitora,
quiero que el sistema no sea capaz de almacenar más de cinco sanciones, ya que no sería necesario, porque a la quinta se le expulsa del centro.

*/
CREATE OR REPLACE TRIGGER RN1_SANCION
    BEFORE UPDATE OF SANCIONES ON USUARIOS
FOR EACH ROW
BEGIN
    IF :NEW.SANCIONES =6
    THEN RAISE_APPLICATION_ERROR
        (-20600, ' NO SE PUEDEN TENER MAS DE 5 SANCIONES, LA CANTIDAD A ACTUALIZAR ERA: ' || :NEW.SANCIONES);
        
    END IF;
END RN1_SANCION;
/

/*?	RN-3: Imposibilidad de eliminación de datos.
Como monitora,
quiero que no se pueda eliminar información del sistema de ninguna persona que haya pasado por el centro,
para tener en cuenta el regreso de antiguos miembros.
*/
CREATE OR REPLACE TRIGGER RN3_ELIMINACION_DATOS
BEFORE DELETE ON USUARIOS
FOR EACH ROW
BEGIN
    RAISE_APPLICATION_ERROR (-20601,'NO SE PUEDEN ELIMINAR DATOS DE LOS USUARIOS');

END RN3_ELIMINACION_DATOS;
/

/*?	RN-4: Creación de actividades.
Como monitora,
quiero que si hay menos de 10 asistentes inscritos no se pueda realizar la actividad.
*/

CREATE OR REPLACE TRIGGER RN4_CREACION_ACTIVIDADES
    BEFORE UPDATE OF NUMERO_ASISTENTES ON ACTIVIDADES
FOR EACH ROW
DECLARE
BEGIN
    IF :NEW.NUMERO_ASISTENTES < 10
     THEN RAISE_APPLICATION_ERROR(-20603, 'SOLO PUEDEN REALIZARSE ACTIVIDADES CON AL MENOS 10 ASISTENTES. EL NÚMERO DE ASISTENTES A ACTUALIZAR ERA: ' || :NEW.NUMERO_ASISTENTES);
    END IF;
END RN4_CREACION_ACTIVIDADES;
/

/*?	RN-5: Restricciones para apuntarse a una actividad.
Como monitora, quiero que el sistema no permita apuntarse a una actividad a
alguien después con más de tres sanciones por mala conducta.

*/
CREATE OR REPLACE TRIGGER RN5_INSCRIPCION_ACTIVIDAD
    BEFORE INSERT ON INSCRIPCIONES
FOR EACH ROW
DECLARE NUMERO_SANCIONES NUMBER(10);
BEGIN
    SELECT SANCIONES INTO NUMERO_SANCIONES FROM USUARIOS WHERE DNI = :NEW.DNI;
    IF (NUMERO_SANCIONES > 3)
        THEN RAISE_APPLICATION_ERROR (-20602, 'NO SE PUEDEN INSCRIBIR USUARIOS CON MÁS DE 3 SANCIONES');
    END IF;
    
END RN5_INSCRIPCION_ACTIVIDAD;
/

/*?	RN-8: Disponibilidad de los prestamos.
Como encargado de prestamos,
quiero que no puedan realizarse prestamos de materiales que no esten disponibles.
*/
CREATE OR REPLACE TRIGGER RN8_DISPONIBILIDAD_PRESTAMOS
BEFORE INSERT ON UNIDADES
FOR EACH ROW
DECLARE DISPONIBILIDAD_MATERIAL VARCHAR2(50); 
BEGIN
    SELECT DISPONIBILIDAD INTO DISPONIBILIDAD_MATERIAL FROM MATERIALES_PRESTADOS WHERE OID_MPR = :NEW.OID_MPR;
    IF (DISPONIBILIDAD_MATERIAL = 'F')
		THEN RAISE_APPLICATION_ERROR(-20603, 'NO PUEDEN REALIZARSE PRESTAMOS DE MATERIALES NO DISPONIBLES');
    END IF;
END  RN8_DISPONIBILIDAD_PRESTAMOS;
/

/*?	RN-8: Control de préstamos.
					Como encargado de préstamos,
quiero que nadie pueda tener dos préstamos al mismo tiempo,
para controlar mejor el inventario.
*/
/*
CREATE OR REPLACE TRIGGER RN7_CONTROL_PRESTAMOS
BEFORE INSERT ON PRESTAMOS
FOR EACH ROW
BEGIN
    FOR LISTA_PRESTAMOS IN (SELECT DEVOLUCION FROM PRESTAMOS WHERE DNI = :NEW.DNI)
	LOOP
		IF LISTA_PRESTAMOS.DEVOLUCION IS NOT NULL AND LISTA_PRESTAMOS.DEVOLUCION = 'F'
		THEN RAISE_APPLICATION_ERROR 
		(-20604, 'NO SE PUEDEN TENER DOS PRESTAMOS SIMULTANEAMENTE');
		END IF;
    END LOOP;
END RN7_CONTROL_PRESTAMOS;
/
*/

/*Un usuario no puede cambiar de alojamiento si no ha pasado al menos un mes en el*/
/*CREATE OR REPLACE TRIGGER T_ALOJAMIENTOS
    BEFORE UPDATE OF OID_EST ON ESTANCIAS
FOR EACH ROW
DECLARE
    DURACION_ESTANCIA NUMBER;
BEGIN
    SELECT DATEDIFF(DAY, FECHA_ENTRADA, FECHA_SALIDA) INTO DURACION_ESTANCIA FROM ESTANCIAS;
    IF ((DURACION_ESTANCIA != 30)OR(DURACION_ESTANCIA != 31))
    THEN RAISE_APPLICATION_ERROR(-20605, :NEW.OID_EST
    || 'NO SE PUEDE CAMBIAR DE ALOJAMIENTO SI LA DURACION DE LA ULTIMA ESTANCIA NO ES DE AL MENOS UN MES');
    END IF;
END T_ALOJAMIENTOS;
/
*/

/*No podemos quedarnos sin materiales para los prestamos*/
CREATE OR REPLACE TRIGGER T_MATERIALES
    BEFORE UPDATE OF OID_PRE ON PRESTAMOS
FOR EACH ROW
DECLARE
    CANTIDAD_DISPONIBLE VARCHAR2(50);
BEGIN
    SELECT CANTIDAD INTO CANTIDAD_DISPONIBLE FROM MATERIALES_PRESTADOS;
    IF((CANTIDAD_DISPONIBLE = 'UNO')OR(CANTIDAD_DISPONIBLE='1'))
    THEN RAISE_APPLICATION_ERROR(-20606, :NEW.OID_PRE 
    ||'NO PODEMOS QUEDARNOS SIN MATERIAL PARA LOS PRESTAMOS');

    END IF;
END T_MATERIALES;
/

/*No se puede solicitar otro prestamo si no se ha devuelto el anterior*/
CREATE OR REPLACE TRIGGER T_DEVOLUCION
    BEFORE UPDATE OF OID_PRE ON PRESTAMOS
FOR EACH ROW
DECLARE
    ESTADO_DEVOLUCION VARCHAR2(50);
BEGIN
    SELECT DEVOLUCION INTO ESTADO_DEVOLUCION FROM PRESTAMOS;
    IF(ESTADO_DEVOLUCION = 'F')
    THEN RAISE_APPLICATION_ERROR(-20607, :NEW.OID_PRE
    ||'DEBE DEVOLVERSE EL MATERIAL SOLICITADO ANTERIORMENTE');
    END IF;
END T_DEVOLUCION;
/
/*Un usuario no puede inscribirse varias veces en la misma actividad*/
CREATE OR REPLACE TRIGGER T_INSCRIPCIONES
    BEFORE UPDATE OF OID_INS ON INSCRIPCIONES
FOR EACH ROW
DECLARE
    ACTIVIDAD_NEW NUMBER;
    ACTIVIDAD_OLD NUMBER;
BEGIN
    SELECT :NEW.OID_ACT INTO ACTIVIDAD_NEW FROM INSCRIPCIONES;
    SELECT :OLD.OID_ACT INTO ACTIVIDAD_OLD FROM INSCRIPCIONES;

    IF(ACTIVIDAD_NEW = ACTIVIDAD_OLD )
    THEN RAISE_APPLICATION_ERROR(-20608, :NEW.OID_ACT ||'YA SE HA INSCRITO EN ESTA ACTIVIDAD');
    END IF;
END T_INSCRIPCIONES;
/